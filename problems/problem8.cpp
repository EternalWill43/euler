#include <iostream>

int main()
{
    std::string s =
        "7316717653133062491922511967442657474235534919493496983520312774506326"
        "2395783180169848018694788518438586156078911294949545950173795833195285"
        "3208805511125406987471585238630507156932909632952274430435576689664895"
        "0445244523161731856403098711121722383113622298934233803081353362766142"
        "8280644448664523874930358907296290491560440772390713810515859307960866"
        "7017242712188399879790879227492190169972088809377665727333001053367881"
        "2202354218097512545405947522435258490771167055601360483958644670632441"
        "5722155397536978179778461740649551492908625693219784686224828397224137"
        "5657056057490261407972968652414535100474821663704844031998900088952434"
        "5065854122758866688116427171479924442928230863465674813919123162824586"
        "17866458359124566529476545682848912883142607690042"
        "24219022671055626321111109370544217506941658960408"
        "07198403850962455444362981230987879927244284909188"
        "84580156166097919133875499200524063689912560717606"
        "05886116467109405077541002256983155200055935729725"
        "71636269561882670428252483600823257530420752963450";
    long long largest = 0;
    for (int i = 0; i <= s.length() - 13; i++)
    {
        long long total = 1;
        for (int j = i; j < i + 13; j++)
        {
            total *= s[j] - '0';
        }
        if (total > largest) largest = total;
    }
    std::cout << largest << "\n";
    return 0;
}